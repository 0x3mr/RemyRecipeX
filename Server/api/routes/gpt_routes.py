"""
gpt_routes.py

This module implements the GPT-related routes for a Flask web application. It provides endpoints for retrieving
model information and generating recipes based on user-provided ingredients.

Routes:
    /model (GET): Retrieve the model information.
    /ask (POST): Generate a recipe based on user's provided leftover ingredients.
    /recipe (POST): Retrieve detailed recipe information based on user's provided ingredients.

Functions:
    model(): Retrieves the model version information.
    ask(): Generates a recipe based on user's provided leftover ingredients.
    recipe(): Retrieves detailed recipe information based on user's provided ingredients.
    init_gpt_routes(gem_key): Initializes the GPT routes with the given Gemini API key.
"""

from flask import Blueprint, jsonify, request, session
from .gemi import GEmeni

# Initialize a Flask blueprint for GPT-related routes
gpt_bp = Blueprint('gpt', __name__)

@gpt_bp.route("/model", methods=["GET"])
def model():
    """
    Retrieve the model information.

    This endpoint returns basic information about the model version.
    It checks if the user is logged in before returning the model info.
    
    Returns:
        Response: JSON response with model version if logged in, or a 400 error if the user is not authenticated.
    """
    if 'email' not in session:
        return jsonify({"message": "Not logged in"}), 400

    return jsonify("3.5"), 200
    email = session.get('email')
    user_info = USER.get_info(email)
    return jsonify(user_info), 200

# chat_session.send_message("tomato, rice, green salad, cheese, cooked chicken, corn")


@gpt_bp.route("/ask", methods=["POST"])
def ask():
    """
    Generate a recipe based on user's provided leftover ingredients.

    This endpoint expects a JSON input containing the user's leftover ingredients
    and returns a recipe generated by the GPT model based on those ingredients.

    Input:
        - JSON data with a field "input" containing the ingredients.

    Returns:
        Response: A generated recipe in JSON format if successful, or a 400 error if no input is provided,
                  or a 500 error if there is an issue generating the recipe.
    """
    if 'email' not in session:
        return jsonify({"message": "Not logged in"}), 400

    data = request.get_json(silent=True)
    if data is None:
        return jsonify({"message": "missing parameters"}), 400

    ingred = data.get("input")
    if not ingred:
        return jsonify({"message": "missing parameters"}), 400

    ans, code = gem.ask(ingred, qtype=1)
    if code != 200:
        return jsonify({"message": ans}), 500 
    print(ans, type(ans))
    return jsonify(ans), 200

@gpt_bp.route("/recipe", methods=["POST"])
def recipe():
    """
    Retrieve detailed recipe information based on user's provided ingredients.

    This endpoint expects a JSON input containing the user's ingredients
    and returns detailed recipe information generated by the GPT model.

    Input:
        - JSON data with a field "input" containing the ingredients.

    Returns:
        Response: Detailed recipe information in JSON format if successful, or a 400 error if no input is provided,
                  or a 500 error if there is an issue generating the recipe.
    """
    if 'email' not in session:
        return jsonify({"message": "Not logged in"}), 400

    data = request.get_json(silent=True)
    if data is None:
        return jsonify({"message": "missing parameters"}), 400

    ingred = data.get("input")
    if not ingred:
        return jsonify({"message": "missing parameters"}), 400

    ans, code = gem.ask(ingred, qtype=2)
    if code != 200:
        return jsonify({"message": ans}), 500 
    print(ans, type(ans))
    return jsonify(ans), 200

def init_gpt_routes(gem_key):
    """
    Initializes the GPT routes with the given Gemini API key.

    Args:
        gem_key (str): The Gemini API key to be used for initializing the GEmeni instance.
    """
    global gem
    gem = GEmeni(gem_key)
